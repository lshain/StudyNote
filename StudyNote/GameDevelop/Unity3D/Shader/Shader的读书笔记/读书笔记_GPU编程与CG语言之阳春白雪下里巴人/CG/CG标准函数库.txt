Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-07-04T10:12:28+08:00

====== CG标准函数库 ======
Created 星期一 04 七月 2016

Cg 标准函数会随着未来GPU 硬件的发展而不断优化，所以基于标准函数库写的程序是可以用在以后的GPU 硬件上的。

=== Cg 标准函数库主要分为五个部分： ===
1. 数学函数（Mathematical Functions）;
2. 几何函数(Geometric Functions)；
3. 纹理映射函数(Texture Map Functions)；（作为单独的一章进行讲解）
4. 偏导数函数(Derivative Functions)；
5. 调试函数(Debugging Function)；

=== 数学函数（Mathematical Functions） ===
abs(x) 					返回输入参数的绝对值
acos(x)					反余切函数，输入参数范围为[-1,1]，返回[0,π ]区间的角度值
all(x)						如果输入参数均不为0，则返回ture；否则返回flase。&&运算
any(x)					输入参数只要有其中一个不为0，则返回true。||运算
asin(x)					反正弦函数,输入参数取值区间为[.1,1]，返回角度值范围为[-2/π, 2/π] 
atan(x)					反正切函数，返回角度值范围为[-2/π, 2/π] 
atan2(y,x)					计算y/x 的反正切值。实际上和atan(x)函数功能完全一样，至少输入参数不同。atan(x) = atan2(x, float(1))。

ceil(x)					对输入参数向上取整。例如：ceil(float(1.3)) ，其返回值为2.0
clamp(x,a,b)				如果x 值小于a，则返回a；如果x 值大于b，返回b；否则，返回x。
cos(x)					返回弧度 x的余弦值。返回值范围为[−1,1]
cosh(x)					双曲余弦（hyperbolic cosine）函数，计算x的双曲余弦值。
cross(A,B)					返回两个三元向量的叉积(cross product)。注意，输入参数必须是三元向量！

degrees(x)				输入参数为弧度值(radians)，函数将其转换为角度值(degrees)
determinant(m)				计算矩阵的行列式因子。
dot(A,B)					返回A 和B 的点积(dot product)。参数A 和B可以是标量，也可以是向量（输入参数方面，点积和叉积函数有很大不同）。

exp(x)					计算e^x的值，e= 2.71828182845904523536
exp2(x)					计算2^x的值

floor(x)					对输入参数向下取整。例如 floor(float(1.3)) 返回的值为1.0；但是floor(float(-1.3))返回的值为-2.0。该函数与ceil(x)函数相对应。
fmod(x,y)					返回x/y 的余数。如果y 为0，结果不可预料。
frac(x)					Returns the fractional portion of a scalar or each vector component(返回一个标量的分数部分或者每一个向量组件)
frexp(x, out exp)			将浮点数x 分解为尾数和指数，即x = m* 2^exp，返回m，并将指数存入exp 中；如果x 为0，则尾数和指数都返回0

isfinite(x)					判断标量或者向量中的每个数据是否是有限数，如果是返回true；否则返回false;无限的或者非数据(not-a-number NaN)，
isinf(x)					判断标量或者向量中的每个数据是否是无限，如果是返回true；否则返回false;
isnan(x)					判断标量或者向量中的每个数据是否是非数据(not-a-number NaN)，如果是返回true；否则返回false;

ldexp(x, n)					计算x*2^n的值.
lerp(a, b, f)				计算( 1 − f ) * a + b * f 或者 a + f * ( b − a )的值。即在下限a 和上限b 之间进行插值，f 表示权值。注意，如果a 和b 是向量，则权值f必须是标量或者等长的向量。
lit(NdotL, NdotH, m)			N 表示法向量；L 表示入射光向量；H 表示半角向量；m 表示高光系数。
						  函数计算环境光、散射光、镜面光的贡献，
						  返回的4 元向量：
						  X 位表示环境光的贡献，总是1.0；
						  Y位代表散射光的贡献，如果N • L < 0，则为0；否则为N • L
						  Z位代表镜面光的贡献，如果 N • L < 0或者N • H < 0，则位 0；否则为(N • H)m；
						  W 位始终位1.0

log(x)					计算ln( x)的值，x必须大于 0
log2(x)					计算以 2 为底的对数值，x 必须大于0
log10(x)					计算以 10 为底的对数值，x 必须大于0

max(a, b)					比较两个标量或等长向量元素，返回最大值。
min(a,b)					比较两个标量或等长向量元素，返回最小值。
modf(x, out ip)				
mul(M, N)					计算两个矩阵相乘，如果M为 AxB 阶矩阵，N为 BxC 阶矩阵，则返回AxC 阶矩阵。下面两个函数为其重载函数。
mul(M, v)					计算矩阵和向量相乘
mul(v, M)					计算向量和矩阵相乘

noise(x)					噪声函数，返回值始终在0，1 之间；对于同样的输入，始终返回相同的值（也就是说，并不是真正意义上的随机噪声）。

pow(x, y)					x^y

radians(x)					函数将角度值转换为弧度值
round(x)					Round-to-nearest，或closest integer to x 即四舍五入。
rsqrt(x)					X 的反平方根，x 必须大于0

saturate(x)				如果x 小于0，返回0；如果x 大于1，返回1；否则，返回x
sign(x)					如果x 大于0，返回1；如果x 小于0，返回-1；否则返回0。
sin(x)					输入参数为弧度，计算正弦值，返回值范围为[−1,1]
sincos(float x,out s, out c)		该函数是同时计算x 的sin 值和cos 值，其中s=sin(x)，c=cos(x)。该函数用于“同时需要计算sin 值和cos 值的情况”，比分别运算要快很多!
sinh(x)					计算双曲正弦（hyperbolic sine）值。
smoothstep(min,max, x)		值x 位于min、max 区间中。如果x=min，返回0；如果x=max，返回1；如果x 在两者之间，按照下列公式返回数据：-2 * ( ( x - min ) / ( max - min ) )^3 + 3 * ( ( x - min ) / ( max - min ) ) ^ 2
step(a, x)					如果x<a，返回0；否则，返回1。
sqrt(x)					求x 的平方根， x 必须大于0。

tan(x)					输入参数为弧度，计算正切值
tanh(x)					计算双曲正切值
transpose(M)				M为矩阵，计算其转置矩阵

=== 几何函数（Geometric Functions） ===
几何函数，如表 5 所示，用于执行和解析几何相关的计算，例如根据入射光向量和顶点法向量，求取反射光和折射光方向向量。Cg 语言标准函数库中有3 个几何函数会经常被使用到，分别是：
normalize 函数，对向量进行归一化；
reflect函数，计算反射光方向向量；
refract 函数，计算折射光方向向量。

**大声呐喊，并要求强烈注意：**
1. **着色程序中的向量最好进行归一化之后再使用，否则会出现难以预料的错误；**
2. **reflect 函数和refract 函数都存在以“入射光方向向量”作为输入参数，注意这两个函数中使用的入射光方向向量，是从外指向几何顶点的；平时我们在着色程序中或者在课本上都是将入射光方向向量作为从顶点出发。**

distance(pt1, pt2)			两点之间的欧几里德距离（Euclidean distance）
faceforward(N,I,Ng)			如果Ng • I < 0，返回N；否则返回-N。
length(v)					返回一个向量的模，即sqrt(dot(v,v))
normalize(v)				归一化向量
reflect(I, N)				根据入射光方向向量I，和顶点法向量N，计算反射光方向向量。其中I 和N必须被归一化，需要非常注意的是，这个I 是指向顶点的；函数只对三元向量有效。
refract(I,N,eta)				计算折射向量，I 为入射光线，N 为法向量，eta 为折射系数；其中I 和N 必须被归一化，如果I 和N 之间的夹角太大，则返回（0，0，0），也就是没有折射光线；I 是指向顶点的；函数只对三元向量有效。

=== 纹理映射函数（Texture Map Functions） ===
所有的这些函数返回四元向量值。

tex1D(sampler1D tex, float s)
一维纹理查询

tex1D(sampler1D tex, float s, float dsdx, float dsdy)
使用导数值（derivatives）查询一维纹理

Tex1D(sampler1D tex, float2 sz)
一维纹理查询，并进行深度值比较

Tex1D(sampler1D tex, float2 sz, float dsdx,float dsdy)
使用导数值（derivatives）查询一维纹理， 并进行深度值比较

Tex1Dproj(sampler1D tex, float2 sq)
一维投影纹理查询

Tex1Dproj(sampler1D tex, float3 szq)
一维投影纹理查询，并比较深度值

Tex2D(sampler2D tex, float2 s)
二维纹理查询

Tex2D(sampler2D tex, float2 s, float2 dsdx, float2 dsdy)
使用导数值（derivatives）查询二维纹理

Tex2D(sampler2D tex, float3 sz)
二维纹理查询，并进行深度值比较

Tex2D(sampler2D tex, float3 sz, float2 dsdx,float2 dsdy)
使用导数值（derivatives）查询二维纹理，并进行深度值比较

Tex2Dproj(sampler2D tex, float3 sq)
二维投影纹理查询

Tex2Dproj(sampler2D tex, float4 szq)
二维投影纹理查询，并进行深度值比较

texRECT(samplerRECT tex, float2 s)

texRECT(samplerRECT tex, float2 s, float2 dsdx, float2 dsdy)

texRECT(samplerRECT tex, float3 sz, float2 dsdx,float2 dsdy)

texRECTproj(samplerRECT tex, float3 sq)

texRECTproj(samplerRECT tex, float3 szq)

Tex3D(sampler3D tex, float3 s)
三维纹理查询

Tex3D(sampler3D tex, float3 s, float3 dsdx, float3 dsdy)
结合导数值（derivatives）查询三维纹理

Tex3Dproj(sampler3D tex, float4 szq)
查询三维投影纹理，并进行深度值比较

texCUBE(samplerCUBE tex, float3 s)
查询立方体纹理

texCUBE (samplerCUBE tex, float3 s, float3 dsdx, float3 dsdy)
结合导数值（derivatives）查询立方体纹理

texCUBEproj (samplerCUBE tex, float4 sq)
查询投影立方体纹理

s 象征一元、二元、三元纹理坐标；
z 代表使用“深度比较（depth comparison）”的值；
q 表示一个透视值（perspective value,其实就是透视投影后所得到的齐次坐标的最后一位），这个值被用来除以纹理坐标（S），得到新的纹理坐标（已归一化到0 和1 之间）然后用于纹理查询。

纹理函数非常多，总的来说，按照纹理维数进行分类，即：1D 纹理函数，2D 纹理函数，3D 纹理函数，以及立方体纹理。需要注意，TexRECT 函数查询的纹理实际上也是二维纹理。

3D 纹理，另一个比较学术化的名称是“体纹理（Volume Texture）”，体纹理通常用于体绘制，体纹理用于记录空间中的体细节数据。

还有一类较为特殊的纹理查询函数以proj 结尾，主要是针对投影纹理进行查询。所谓投影纹理是指：将纹理当做一张幻灯片投影到场景中，使用投影纹理技术需要计算投影纹理坐标，然后使用投影纹理坐标进行查询。使用投影纹理坐标进行查询的函数就是投影纹理查询函数。
本质来说，投影纹理查询函数和普通的纹理查询函数没有什么不同，唯一的区别在于“投影纹理查询函数使用计算得到的投影纹理坐标，并在使用之前会将该投影纹理坐标除以透视值”。举例而言，计算得到的投影纹理坐标为float4uvproj，使用二维投影纹理查询函数：

tex2Dproj(texture,uvproj);

等价于按如下方法使用普通二维纹理查询函数：

float4 uvproj = uvproj/uvproj.q;
tex2D(texture,uvproj);

=== 偏导函数（Derivative Functions） ===
ddx(a)						参数a 对应一个像素位置，返回该像素值在X 轴上的偏导数
ddy(a)						参数a 对应一个像素位置，返回该像素值在Y 轴上的偏导数

**如果函数ddx 的参数为myVar，该参数对应的像素点记为 p (i, j)，则 ddx(myVar)的值为“像素点 p (i +1, j)的值减去 myVar”。同理，ddy(myVar)的值为“像素点 p (i, j +1)的值减去 myVar”。**
**如果函数 ddx和 ddy的输入参数为常数，则函数返回值永远为0。**

学过高等数学应该知道，偏导数的物理含义是：在某一个方向上的变化快慢。所以
ddx 求的是X方向上，相邻两个像素的某属性值的变化量；
ddy 球的是Y方向上，相邻两个像素的某属性值的变化量。

正是由于ddx 和ddy 指令是作用于像素级的，所以ddx 和ddy 函数只被片段程序所支持。

当在纹理查询函数中使用ddx 和ddy 是可以进行图形过滤。所谓图像过滤，一个比较简单的定义是：对于给定的输入图像A，要创建新的图像B，把源图像A 变换到目标图像B 的操作就是图像滤波。最一般的变换是调整图像大小、锐化、变化颜色，以及模糊图像等。复杂的过滤有赖于知道究竟需要过滤多少纹理。

{{./1.png}}
二维纹理正常采样效果图

图展示了tex2D(sampler2D tex , float3 sz ,float2 dsdx , float2 dsdy )函数进行纹理采样时，分别取x,y方向的偏导数为（0.01，0.01）、（0.02，0.02）、（0.0，0.015）时的效果。
{{./2.png}}
使用偏导函数进行采样的效果图

