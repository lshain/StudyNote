Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-08-12T12:35:01+08:00

====== 透明光照模型与环境贴图 ======
Created 星期五 12 八月 2016

材质和光的交互除了反射现象，对于透明物体还存在透射现象。模拟光的透射现象通常是一个比较头痛的问题，因为需要至少计算光的两次透射方向，首先计算光从介质一进入介质二的透射方向，然后计算光从介质二进入介质一的透射方象。此外，光在透明物体内穿越的距离以及被穿越的材质，直接关系到光的衰减程度；加上，还有很复杂的透明材质的次表面散射现象，即光线渗透到透明材质中，在内部发生散射，最后射出物体并进入视野中产生的现象。总而言之，不论在CPU上还是在GPU上，想要精确完善的模拟光透现象是一件相当复杂的事情。

本章中，首先给出与光透现象相关的两个重要光学定律：Snell定律和Fresnel定律；然后阐述如何使用环境贴图方法模拟光滑表面对周围场景的映射效果，并给出GPU实现代码；最后讲解简单透明光照模型，并给出GPU实现代码。这些技术非常有用，在大家所玩的3D游戏中，为了在效率和效果上达到平衡，百分之百是采用这些技术或者这些技术的变体。

===== 折射率与Snell 定律 =====
光在真空中的速度c 与在透明介质中的速度v 之比，如公式（11-1）所示，称之为该介质的绝对折射率，简称折射率。光在真空中的折射率等于1，通常我们认为光在空气中的折射率也近视为1。
{{~/Desktop/1111/1.png}}

折射率较大介质的称为光密介质，折射率较小的介质称为光疏介质。下面给出一些常用介质的折射率，如表所示。
{{~/Desktop/1111/2.png}}
**Snell 定律描述光线从一个介质传播到另一个介质时，入射角、折射角和介质折射率的关系。**

假设光线从空气射入水面，入射角度为θi，空气对光线的折射率为ni，折射率角度为θt，水对光线的折射率为nt ，则存在：
{{~/Desktop/1111/3.png}}

通过snell 定律，我们可以根据入射光的方向向量求取折射光的方向向量
{{~/Desktop/1111/4.png}}

**需要注意：折射率和下面将要阐述的fresnel 折射系数并不是同样的东西。折射率本质上反映的是光在介质中的运行速度，以及折射方向；而fresnel 折射系数反映的是，光在透明介质表面被折射的光通量的比率。**

===== 色散 =====
色散分为正常色散和反常色散，通常我们所说的色散都是指反常色散，即，对光波透明的介质，其折射率随着波长的增加而减小。1672 年，牛顿利用三棱镜将太阳光分解为光谱色带（红橙黄绿蓝靛紫），这是人类首次所做的色散试验。天空中的彩虹也是由于光与水蒸气交互形成的色散现象（图 29 所示）。法国数学家柯西在1936 年首先给出了正常色散的经验公式，称为柯西公式。

{{~/Desktop/1111/5.png}}
						色散效果
						

===== Fresnel 定律 =====
光线照射到透明物体上时，一部分发生反射，一部分进入物体内部并在介质交界处发生折射，被反射和折射的光通量存在一定的比率关系，这个比率关系可以通过Fresnel 定律进行计算。

根据Fresnel 定律计算得出的数据称为Fresnel 系数。严格而言，fresnel 系数分为fresnel 反射系数和fresnel 折射系数，通常我们所说的fresnel 系数指“反射系数”。例如，实时计算机图形学第二版139 页中写到：fresnel 系数，如果fresnel为0.7，那么被反射光线就减少奥70%，穿过表面的折射光线则是30%。下文中我们用 kr 表示fresnel 反射系数，用kt 表示折射系数，如果不做详细说明，则通常所写的fresnel 系数指反射系数。

schlick 给出了Fresnel 反射系数的一个近似，精度在1%范围内：
{{~/Desktop/1111/6.png}}
f0 为入射角度接近0（入射方向靠近法向量）时的Fresnel 反射系数，V 是指向视点的观察方向，H 为半角向量。观察公式，可以得出一个结论：
随着入射角趋近90，反射系数趋近1，即擦地入射时，所有入射光都被反射。

在fresnel equations-Wikepedia 中列举了当入射角度接近0 时的fresnel 反射系数的计算方法：
{{~/Desktop/1111/7.png}}

综合以上公式，fresnel 反射系数的计算公式为：
{{~/Desktop/1111/8.png}}

===== 环境贴图 =====
环境贴图（Environment Mapping, EM）也称为反射贴图（Reflection Mapping），用于模拟光滑表面对周围场景的映射效果

使用环境贴图，是为了模拟光滑表面对周围场景的映射效果。光滑表面对周围场景的映射，是由从场景出发的光线投射到光滑表面上然后被反射到人眼所形成的视觉效果
{{~/Desktop/1111/9.png}}
			光滑表面环境映射示意图

**我们将这个过程倒退回去，从视点发射一束射线到反射体上的一个点，然后这束射线以这个点为基准进行反射，并根据反射光线的方向向量检索环境图像的颜色。这就是环境贴图算法的基本思想。**

环境贴图算法的步骤如下：
1. 首先根据视线方向和法向量计算反射向量；
2. 然后使用反射向量检索环境贴图上的纹理信息；
3. 最后将该纹理信息融合到当像素颜色中。

环境贴图在Cg 语言中属于samplerCUBE 类型变量，标准函数库中的texCUBE 函数提供依据反射方向向量检索环境贴图的功能。

在代码中是使用立方体环境贴图实现环境映射效果的着色程序代码。在顶点着色程序中计算反射光线方向向量，然后传递到片段着色程序中，在片段着色程序中利用该方向检索环境贴图，获取纹理颜色，并进行片段赋值。整个实现过程非常简练。
**实现环境映射效果的着色代程序**
void main_v( 
	float4 position: POSITION,
	float4 normal: NORMAL,
	out float4 oposition : POSITION,
	out float3 R : TEXCOORD1,
	uniform float3 eyePosition,
	uniform float4x4 modelViewProj,
	uniform float4x4 modelToWorld)
{
	oposition = mul( modelViewProj, position);
	//计算世界空间中的物体坐标和法向量
	float3 positionW = mul( modelToWorld, position).xyz;
	float3 normalW = mul( modelToWorld_IT, normal).xyz;
	normalW = normalize( normalW);
	float3 I = positionW - eyePosition;
	//计算反射光线R.
	R = reflect( I, normalW );
}

void main_f( 
	float3 R : TEXCOORD1,
	out float4 color : COLOR,
	uniform samplerCUBE environmentMap)
{
	color = texCUBE( environmentMap, R);
}

渲染效果如图所示：
{{~/Desktop/1111/10.png}}










































