Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-07-20T16:42:52+08:00

====== 镜面反射渲染 ======
Created 星期三 20 七月 2016

===== phong 模型渲染 =====
下图展示了在顶点着色程序中进行phong 光照渲染的效果：
{{./1.png}}
phong 光照模型的顶点着色程序渲染效果

与漫反射模型的渲染效果相比，phong 光照模型的渲染效果要圆润很多，明暗界限分明，光斑效果突出。不过请注意图中马的渲染效果，可以很清楚的发现，马的渲染效果没有其他三个模型好，原因在于马模型的面片少，是低精度模型，而顶点着色渲染只对几何顶点进行光照处理，并不会对内部点进行处理。

为了使得低精度模型也能得到高质量的渲染效果，就必须进行片段渲染，所以本节中我们还将给出使用片段着色程序的phong 光照模型渲染代码和效果。

== phong 光照模型的顶点着色程序实现 ==
struct VertexIn
{
	float4 position : POSITION; // Vertex in object-space
	float4 normal : NORMAL;
};

struct VertexScreen
{
	float4 oPosition : POSITION;
	float4 color : COLOR;
};

void main_v( VertexIn posIn,
			out VertexScreen posOut,
			uniform float4x4 modelViewProj,
			uniform float4x4 worldMatrix,
			uniform float4x4 worldMatrix_IT,
			uniform float3 globalAmbient,
			uniform float3 eyePosition,
			uniform float3 lightPosition,
			uniform float3 lightColor,
			uniform float3 Kd,
			uniform float3 Ks,
			uniform float shininess)
{
	posOut.oPosition = mul(modelViewProj, posIn.position);
	float3 worldPos = mul(worldMatrix, posIn.position).xyz;
	float3 N = mul(worldMatrix_IT, posIn.normal).xyz;
	N = normalize(N);

	//计算入射光方向、视线方向、反射光线方向
	float3 L = normalize(lightPosition - worldPos);
	float3 V = normalize(eyePosition - worldPos);
	float3 R = 2*max(dot(N, L), 0)*N-L;
	R = normalize(R);

	// 计算漫反射分量
	float3 diffuseColor = Kd * globalAmbient+Kd*lightColor*max(dot(N, L), 0);

	//计算镜面反射分量
	float3 specularColor = Ks * lightColor*pow(max(dot(V, R), 0), shininess);
	posOut.color.xyz = diffuseColor + specularColor;
	posOut.color.w = 1;
}

下面给出同时使用顶点着色程序和片段着色程序的phong 光照模型代码。依然是首先定义结构体，用来包含输入、输出数据流，不过这里使用的结构体和上面代码中的有所不同，在VertexScreen 结构体中有两个绑定到TEXCOORD 语义词的变量，objectPos 和objectNormal，这两个变量用于传递顶点模型空间坐标和法向量坐标到片段着色器中。

== phong 光照模型片段着色实现的结构体 ==
struct VertexIn
{
	float4 position : POSITION;
	float4 normal : NORMAL;
};

struct VertexScreen
{
	float4 oPosition : POSITION;
	float4 objectPos : TEXCOORD0;
	float4 objectNormal : TEXCOORD1;
};

代码展示了当前的顶点着色程序代码，其所做的工作有两点：首先将几何顶点的模型空间坐标转换为用于光栅化的投影坐标；然后将顶点模型坐标和法向量模型坐标赋值给绑定TEXCOORD 语义词的变量，用于传递到片段着色程序中。

== phong 光照模型顶点着色程序 ==
void main_v( VertexIn posIn,
			out VertexScreen posOut,
			uniform float4x4 modelViewProj)
{
	posOut.oPosition = mul(modelViewProj, posIn.position);
	posOut.objectPos = posIn.position;
	posOut.objectNormal = posIn.normal;
}

代码展示了使用phong 光照模型渲染的片段着色程序。我将反射光方向、视线方向、入射光方向都放在片段着色程序中计算，实际上这些光照信息也可以放到顶点着色程序中计算，然后传递到片段着色程序中。

== phong 光照模型片段着色程序 ==
void main_f( VertexScreen posIn,
		   out float4 color : COLOR,
		   uniform float4x4 worldMatrix,
		   uniform float4x4 worldMatrix_IT,
		   uniform float3 globalAmbient,
		   uniform float3 eyePosition,
		   uniform float3 lightPosition,
		   uniform float3 lightColor,
		   uniform float3 Kd,
		   uniform float3 Ks,
		   uniform float shininess)
{
	float3 worldPos = mul(worldMatrix, posIn.objectPos).xyz;
	float3 N = mul(worldMatrix_IT, posIn.objectNormal).xyz;
	N = normalize(N);

	//计算入射光方向、视线方向、反射光线方向
	float3 L = normalize(lightPosition - worldPos);
	float3 V = normalize(eyePosition - worldPos);
	float3 R = 2*max(dot(N, L), 0)*N-L;
	R = normalize(R);

	// 计算漫反射分量
	float3 diffuseColor = Kd * globalAmbient+Kd*lightColor*max(dot(N, L), 0);

	//计算镜面反射分量
	float3 specularColor = Ks * lightColor*pow(max(dot(V, R), 0), shininess);
	color.xyz = diffuseColor + specularColor;
	color.w = 1;
}

同时使用顶点着色程序和片段着色程序的phong 光照模型渲染效果。
{{./2.png}}
phong 光照模型的片段着色程序渲染效果

通常情况下，使用Blinn-phong 光照模型渲染的效果和phong 模型渲染的效果没有太大的区别，有些艺术工作者认为phong 光照模型比blinn-phong 更加真实，实际上也是如此。Blinn-phong 渲染效果要更加柔和一些，Blinn-phong 光照模型省去了计算反射光线方向向量的两个乘法运算，速度更快。由于Blinn-phong和phong 模型的唯一区别一个使用半角向量，一个使用反射光方向向量，所以下面只给出Blinn-phong 模型的片段着色程序代码。

=== Blinn-phong 模型片段着色程序 ===
void main_f( VertexScreen posIn,
		   out float4 color : COLOR,
		   uniform float4x4 worldMatrix,
		   uniform float4x4 worldMatrix_IT,
		   uniform float3 globalAmbient,
		   uniform float3 eyePosition,
		   uniform float3 lightPosition,
		   uniform float3 lightColor,
		   uniform float3 Kd,
		   uniform float3 Ks,
		   uniform float shininess)
{
	float3 worldPos = mul(worldMatrix, posIn.objectPos).xyz;
	float3 N = mul(worldMatrix_IT, posIn.objectNormal).xyz;
	N = normalize(N);

	//计算入射光方向\视线方向\半角向量
	float3 L = normalize(lightPosition - worldPos);
	float3 V = normalize(eyePosition - worldPos);
	float3 H = normalize(L + V);

	// 计算漫反射分量
	float3 diffuseColor = Kd * globalAmbient+Kd*lightColor*max(dot(N, L), 0);

	//计算镜面反射分量
	float3 specularColor = Ks * lightColor*pow(max(dot(N, H), 0), shininess);
	color.xyz = diffuseColor + specularColor;
	color.w = 1;
}

{{./3.png}}
Blinn-phong 光照模型渲染效果

