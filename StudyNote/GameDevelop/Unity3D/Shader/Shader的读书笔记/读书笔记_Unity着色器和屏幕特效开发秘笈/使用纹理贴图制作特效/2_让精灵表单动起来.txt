Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-08-24T15:17:45+08:00

====== 2 让精灵表单动起来 ======
Created 星期三 24 八月 2016

{{./1.jpg}}
{{./2.jpg}}
1.在着色器的Properties块中创建三个新属性。这样我们可以直接从材质Inspector面板中修改系统，而不必涉及代码：
{{./3.jpg}}

2.然后将输入的UV存储到独立变量，以便在代码中使用它们的值：
{{./4.jpg}}

3.下面，我们需要得到每个单元格的宽度。在精灵表单中，每个网格占用范围为0到1之间的值，所以我们需要计算每个网格的百分比值：
{{./5.jpg}}

4.接下来，我们必须使用系统自带的时间组件，这样我们才能使网格一个个地运动或者偏移起来：
{{./6.jpg}}

5.最后，我们计算出了精灵表单x方向上的UV偏移量。现在，你应该拥有了一个可以创造翻书效果的着色器。
{{./7.jpg}}

=== 实现原理 ===

首先，我们从Input结构体中得到UV值，将其存到一个单独变量中。不过也不一定必须这样做，因为它只是一种相对较好的选择，而不是一个硬性的要求，这只是我们阅读代码的方式而已。在这里，我们将该变量命名为spriteUV，并且声明为float2变量类型。因为我们需要将网格UV的x和y坐标都存到一个变量中。

接下来，我们得到当前纹理的宽度大小，然后根据Properties块中的_CellAmount值将其划分成相同大小的小图片。假如我们有一个宽度是512的纹理，我们把它分为16个单元格，就会得到值32。这就是每个单元格的宽度，但是我们还需要得到每个单元格占整个图片的百分比，这是因为UV值的范围是在0～1之间或者0%～100%之间的。这样我们得到了cellPixelWidth变量（小单元格的宽度），然后除以纹理图片的总宽度。如果我们将32像素除以512像素，可以得到0.06或者纹理图片整个宽度的6%的值。这个值就表示我们从一个单元格到另一个单元格的UV偏移量。

然后，我们需要计算随时间增大的偏移值，这些值都是整数。 例如，一个整数值依次从0，1，2，3，4开始增大，直到增大到精灵表单中单元格的数目。为了做到这些，我们可以使用CGFX的内置函数fmod()。
{{./8.jpg}}

如果我们对x值使用fmod()函数并将它除以y值，会得到相除的余数。所以，当我们使用_Time代替x值，使用_CellAmount值代替y值后，就会得到一个随时间增加的返回值。并且当它的值等于_CellAmount值，它会重新从0开始增长。
{{./9.jpg}}

得到随时间增长的值后，我们需要使用ceil()函数来确保该值是个整数而不是一个浮点数。该函数的基本功能就是向上取整，比如将1.5取整得到2。这样就可以得到整数0，1，2，3，4，...直到等于属性值_CellAmount。一旦达到单元格的数目大小时，它就重新归为0。

最后，我们得到Input?结构体中当前的UV值，然后计算百分比值、时间值还有单元格总数三者相乘的值，将得到的值加到刚才的UV值上。这样，我们就实现了从一个单元格到下个单元格的偏移，但是我们必须对UV值进行缩放使一个时间点只能看到一个单元格，要达到这种效果，我们将UV偏移量乘以百分比，得到最终的UV值。所以这些做完之后就可以将UV值放入tex2D函数中用于纹理渲染了。
